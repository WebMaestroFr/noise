{"version":3,"sources":["Canvas.tsx","Noise.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Canvas","props","onUpdate","rest","canvasRef","useRef","getContext","useCallback","canvas","current","useEffect","animationFrameId","context","frameCount","render","window","requestAnimationFrame","cancelAnimationFrame","useCanvas","ref","Noise","scale","width","height","imageData","simplex","useMemo","SimplexNoise","ImageData","x","y","noise","noise2D","index","data","useNoise","handleUpdate","putImageData","className","App","useState","innerWidth","innerHeight","setSize","handleResize","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"sPAgDeA,EAPX,SAACC,GACH,IAAQC,EAAsBD,EAAtBC,SAAaC,EAArB,YAA8BF,EAA9B,GACMG,EAzCiB,SACvBF,GAEA,IAAME,EAAYC,iBAA0B,MAEtCC,EAAaC,uBAAY,WAC7B,IAAMC,EAASJ,EAAUK,QACzB,OAAID,EACKA,EAAOF,WAAW,MAEpB,OACN,IAqBH,OAnBAI,qBAAU,WACR,IAEIC,EAFEC,EAAUN,IACZO,EAAa,EAYjB,OATe,SAATC,IACJD,IACID,GAAWV,GACbA,EAASU,EAASC,GAEpBF,EAAmBI,OAAOC,sBAAsBF,GAElDA,GAEO,WACLC,OAAOE,qBAAqBN,MAE7B,CAACL,EAAYJ,IAETE,EASWc,CAAUhB,GAE5B,OAAO,oCAAQiB,IAAKf,GAAeD,K,6BCOtBiB,EApBX,SAAC,GAAwD,IAAD,IAArDC,aAAqD,MAA7C,IAA6C,MAAxCC,aAAwC,MAAhC,GAAgC,MAA5BC,cAA4B,MAAnB,GAAmB,EAAZtB,EAAY,iBACpDuB,EA7BgB,SAACF,EAAeC,EAAgBF,GACtD,IAAMI,EAAUC,mBAAsB,kBAAM,IAAIC,MAAgB,IAC1DH,EAAYE,mBAChB,kBAAM,IAAIE,UAAUN,EAAOC,KAC3B,CAACD,EAAOC,IAeV,OAbAb,qBAAU,WACR,IAAK,IAAImB,EAAI,EAAGA,EAAIL,EAAUF,MAAOO,GAAK,EACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAUD,OAAQO,GAAK,EAAG,CAC5C,IAAMC,EAAQN,EAAQO,QAAQH,EAAIR,EAAOS,EAAIT,GACvCY,EAAQH,GAAuB,EAAlBN,EAAUF,OAAiB,EAAJO,EAC1CL,EAAUU,KAAKD,EAAQ,GACrBT,EAAUU,KAAKD,EAAQ,GACvBT,EAAUU,KAAKD,EAAQ,IACnBF,EAAQ,GAAK,EAAK,IACxBP,EAAUU,KAAKD,EAAQ,GAAK,OAG/B,CAACT,EAAWC,EAASJ,IACjBG,EAUWW,CAASb,EAAOC,EAAQF,GACpCe,EAAe7B,uBACnB,SAACK,GACCA,EAAQyB,aAAab,EAAW,EAAG,KAErC,CAACA,IAGH,OACE,cAAC,EAAD,aACEc,UAAU,QACVpC,SAAUkC,EACVd,MAAOA,EACPC,OAAQA,GACJtB,KCpBKsC,MAvBf,WACE,MAAmCC,mBAAS,CAC1CzB,OAAO0B,WACP1B,OAAO2B,cAFT,yCAAQpB,EAAR,KAAeC,EAAf,KAAwBoB,EAAxB,KAIMC,EAAerC,uBACnB,kBAAMoC,EAAQ,CAAC5B,OAAO0B,WAAY1B,OAAO2B,gBACzC,IASF,OAPAhC,qBAAU,WAER,OADAK,OAAO8B,iBAAiB,SAAUD,GAC3B,WACL7B,OAAO+B,oBAAoB,SAAUF,MAEtC,CAACA,IAGF,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,CAAOhB,MAAOA,EAAOC,OAAQA,OCRpBwB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAAS1C,OACP,cAAC,IAAM2C,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.17a29519.chunk.js","sourcesContent":["import React, { useRef, useEffect, useCallback, FC, HTMLProps } from \"react\";\n\nexport const useCanvas = (\n  onUpdate?: (context: CanvasRenderingContext2D, frameCount: number) => void\n) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const getContext = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      return canvas.getContext(\"2d\");\n    }\n    return null;\n  }, []);\n\n  useEffect(() => {\n    const context = getContext();\n    let frameCount = 0;\n    let animationFrameId: number;\n\n    const render = () => {\n      frameCount++;\n      if (context && onUpdate) {\n        onUpdate(context, frameCount);\n      }\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [getContext, onUpdate]);\n\n  return canvasRef;\n};\n\nconst Canvas: FC<\n  HTMLProps<HTMLCanvasElement> & {\n    onUpdate?: (context: CanvasRenderingContext2D, frameCount: number) => void;\n  }\n> = (props) => {\n  const { onUpdate, ...rest } = props;\n  const canvasRef = useCanvas(onUpdate);\n\n  return <canvas ref={canvasRef} {...rest} />;\n};\n\nexport default Canvas;\n","import React, { FC, HTMLProps, useCallback, useEffect, useMemo } from \"react\";\nimport SimplexNoise from \"simplex-noise\";\nimport Canvas from \"./Canvas\";\n\nexport const useNoise = (width: number, height: number, scale: number) => {\n  const simplex = useMemo<SimplexNoise>(() => new SimplexNoise(), []);\n  const imageData = useMemo(\n    () => new ImageData(width, height),\n    [width, height]\n  );\n  useEffect(() => {\n    for (let x = 0; x < imageData.width; x += 1) {\n      for (let y = 0; y < imageData.height; y += 1) {\n        const noise = simplex.noise2D(x / scale, y / scale);\n        const index = y * (imageData.width * 4) + x * 4;\n        imageData.data[index + 0] =\n          imageData.data[index + 1] =\n          imageData.data[index + 2] =\n            ((noise + 1) / 2) * 255;\n        imageData.data[index + 3] = 255;\n      }\n    }\n  }, [imageData, simplex, scale]);\n  return imageData;\n};\n\nconst Noise: FC<\n  HTMLProps<HTMLCanvasElement> & {\n    scale?: number;\n    width?: number;\n    height: number;\n  }\n> = ({ scale = 128, width = 64, height = 64, ...props }) => {\n  const imageData = useNoise(width, height, scale);\n  const handleUpdate = useCallback(\n    (context: CanvasRenderingContext2D) => {\n      context.putImageData(imageData, 0, 0);\n    },\n    [imageData]\n  );\n\n  return (\n    <Canvas\n      className=\"Noise\"\n      onUpdate={handleUpdate}\n      width={width}\n      height={height}\n      {...props}\n    />\n  );\n};\n\nexport default Noise;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Noise from \"./Noise\";\n\nfunction App() {\n  const [[width, height], setSize] = useState([\n    window.innerWidth,\n    window.innerHeight,\n  ]);\n  const handleResize = useCallback(\n    () => setSize([window.innerWidth, window.innerHeight]),\n    []\n  );\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [handleResize]);\n\n  return (\n    <div className=\"App\">\n      <Noise width={width} height={height} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}