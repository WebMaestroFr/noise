{"version":3,"sources":["Canvas.tsx","Noise.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Canvas","onUpdate","props","canvasRef","useRef","getContext","useCallback","canvas","current","useEffect","animationFrameId","context","frameCount","render","window","requestAnimationFrame","cancelAnimationFrame","useCanvas","ref","noiseToRgba","noise","normalizedNoise","rgb","Math","round","Noise","width","height","layers","resolution","computedWidth","computedHeight","computeNoise","randomOrSeed","simplex","useMemo","SimplexNoise","imageData","ImageData","z","x","y","reduce","n","scale","speed","noise3D","length","r","g","b","a","index","data","useNoise","handleUpdate","Date","now","putImageData","className","style","getSize","innerWidth","innerHeight","App","useState","setSize","handleResize","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74401eff.chunk.js","sourcesContent":["import React, { useRef, useEffect, useCallback, FC, HTMLProps } from \"react\";\n\nexport const useCanvas = (\n  onUpdate?: (context: CanvasRenderingContext2D, frameCount: number) => void\n) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const getContext = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      return canvas.getContext(\"2d\");\n    }\n    return null;\n  }, []);\n\n  useEffect(() => {\n    const context = getContext();\n    let frameCount = 0;\n    let animationFrameId: number;\n\n    const render = () => {\n      frameCount++;\n      if (context && onUpdate) {\n        onUpdate(context, frameCount);\n      }\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [getContext, onUpdate]);\n\n  return canvasRef;\n};\n\nconst Canvas: FC<\n  HTMLProps<HTMLCanvasElement> & {\n    onUpdate?: (context: CanvasRenderingContext2D, frameCount: number) => void;\n  }\n> = ({ onUpdate, ...props }) => {\n  const canvasRef = useCanvas(onUpdate);\n  return <canvas ref={canvasRef} {...props} />;\n};\n\nexport default Canvas;\n","import React, { FC, HTMLProps, useCallback, useMemo } from \"react\";\nimport SimplexNoise from \"simplex-noise\";\nimport Canvas from \"./Canvas\";\n\nfunction noiseToRgba(noise: number) {\n  const normalizedNoise = (noise + 1) / 2;\n  const rgb = Math.round(normalizedNoise * 255);\n  return [rgb, rgb, rgb, 255];\n}\n\nexport const useNoise = (\n  width: number,\n  height: number,\n  randomOrSeed?: string | number\n) => {\n  const simplex = useMemo<SimplexNoise>(\n    () => new SimplexNoise(randomOrSeed),\n    [randomOrSeed]\n  );\n  const imageData = useMemo(\n    () => new ImageData(width, height),\n    [width, height]\n  );\n  return useCallback(\n    (\n      layers: {\n        scale: number;\n        speed: number;\n      }[],\n      z: number = 0\n    ) => {\n      for (let x = 0; x < imageData.width; x += 1) {\n        for (let y = 0; y < imageData.height; y += 1) {\n          const noise = layers.reduce(\n            (n, { scale, speed }) =>\n              n +\n              simplex.noise3D(x / scale, y / scale, z * speed) / layers.length,\n            0\n          );\n          const [r, g, b, a] = noiseToRgba(noise);\n          const index = y * (imageData.width * 4) + x * 4;\n          imageData.data[index + 0] = r;\n          imageData.data[index + 1] = g;\n          imageData.data[index + 2] = b;\n          imageData.data[index + 3] = a;\n        }\n      }\n      return imageData;\n    },\n    [imageData, simplex]\n  );\n};\n\nconst Noise: FC<\n  HTMLProps<HTMLCanvasElement> & {\n    width: number;\n    height: number;\n    layers: {\n      scale: number;\n      speed: number;\n    }[];\n    resolution?: number;\n  }\n> = ({ width, height, layers, resolution = 1, ...props }) => {\n  const computedWidth = Math.round(width * resolution);\n  const computedHeight = Math.round(height * resolution);\n  const computeNoise = useNoise(computedWidth, computedHeight);\n  const handleUpdate = useCallback(\n    (context: CanvasRenderingContext2D) => {\n      const z = Date.now() / 1000;\n      const imageData = computeNoise(layers, z);\n      context.putImageData(imageData, 0, 0);\n    },\n    [computeNoise, layers]\n  );\n\n  return (\n    <Canvas\n      className=\"Noise\"\n      onUpdate={handleUpdate}\n      width={computedWidth}\n      height={computedHeight}\n      style={{ width, height }}\n      {...props}\n    />\n  );\n};\n\nexport default Noise;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Noise from \"./Noise\";\n\nconst getSize = (): [number, number] => [window.innerWidth, window.innerHeight];\n\nfunction App() {\n  const [[width, height], setSize] = useState(getSize);\n  const handleResize = useCallback(() => setSize(getSize), []);\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [handleResize]);\n\n  return (\n    <div className=\"App\">\n      <Noise\n        layers={[\n          { scale: 12, speed: 1 / 5 },\n          { scale: 24, speed: 1 / 5 },\n          { scale: 96, speed: 1 / 5 },\n        ]}\n        width={width}\n        height={height}\n        resolution={1 / 4}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}