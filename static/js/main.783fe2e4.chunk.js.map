{"version":3,"sources":["Canvas.tsx","settings/index.tsx","Noise.tsx","settings/Form.tsx","settings/Provider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Canvas","onUpdate","props","canvasRef","useRef","getContext","useCallback","canvas","current","useEffect","animationFrameId","context","frameCount","render","window","requestAnimationFrame","cancelAnimationFrame","useCanvas","ref","DEFAULT_SETTINGS","noise","layers","scale","speed","seed","resolution","Settings","createContext","useSettings","useContext","noiseToRgba","normalizedNoise","rgb","Math","round","Noise","width","height","computedWidth","computedHeight","computeNoise","imageData","useMemo","ImageData","z","simplex","map","SimplexNoise","x","y","reduce","n","currentIndex","noise3D","length","r","g","b","a","index","data","useNoise","handleUpdate","Date","now","putImageData","className","style","NoiseForm","settings","handleChange","key","value","currentTarget","prevSettings","handleValueChange","handleLayerValueChange","handleAddLayer","push","handleRemoveLayer","splice","label","fill","min","max","minorStepSize","onValueChange","stepSize","defaultValue","onChange","labelStepSize","onClick","SettingsProvider","children","initialValue","time","useState","setValue","debouncedValue","setDebouncedValue","debounce","setTimeout","clearTimeout","useDebounce","debouncedNoise","setNoise","Provider","getSize","innerWidth","innerHeight","App","setSize","handleResize","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.783fe2e4.chunk.js","sourcesContent":["import React, { useRef, useEffect, useCallback, FC, HTMLProps } from \"react\";\n\nexport const useCanvas = (\n  onUpdate?: (context: CanvasRenderingContext2D, frameCount: number) => void\n) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const getContext = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      return canvas.getContext(\"2d\");\n    }\n    return null;\n  }, []);\n\n  useEffect(() => {\n    const context = getContext();\n    let frameCount = 0;\n    let animationFrameId: number;\n\n    const render = () => {\n      frameCount++;\n      if (context && onUpdate) {\n        onUpdate(context, frameCount);\n      }\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [getContext, onUpdate]);\n\n  return canvasRef;\n};\n\nconst Canvas: FC<\n  HTMLProps<HTMLCanvasElement> & {\n    onUpdate?: (context: CanvasRenderingContext2D, frameCount: number) => void;\n  }\n> = ({ onUpdate, ...props }) => {\n  const canvasRef = useCanvas(onUpdate);\n  return <canvas ref={canvasRef} {...props} />;\n};\n\nexport default Canvas;\n","import { createContext, useContext } from \"react\";\n\nexport const DEFAULT_SETTINGS: SettingsContext = {\n  noise: {\n    layers: [\n      { scale: 12, speed: 1 / 5, seed: \"1\" },\n      { scale: 24, speed: 1 / 5, seed: \"2\" },\n      { scale: 96, speed: 1 / 5, seed: \"3\" },\n    ],\n    resolution: 1 / 4,\n  },\n};\n\nexport const Settings = createContext<SettingsContext>(DEFAULT_SETTINGS);\n\nconst useSettings = () => useContext(Settings);\nexport default useSettings;\n","import React, { FC, HTMLProps, useCallback, useMemo } from \"react\";\nimport SimplexNoise from \"simplex-noise\";\nimport Canvas from \"./Canvas\";\nimport useSettings from \"./settings\";\n\nfunction noiseToRgba(noise: number) {\n  const normalizedNoise = (noise + 1) / 2;\n  const rgb = Math.round(normalizedNoise * 255);\n  return [rgb, rgb, rgb, 255];\n}\n\nexport const useNoise = (width: number, height: number) => {\n  const imageData = useMemo(\n    () => new ImageData(width, height),\n    [width, height]\n  );\n  return useCallback(\n    (layers: NoiseSettings[\"layers\"], z: number = 0) => {\n      const simplex = layers.map(({ seed }) => new SimplexNoise(seed));\n      for (let x = 0; x < imageData.width; x += 1) {\n        for (let y = 0; y < imageData.height; y += 1) {\n          const noise = layers.reduce(\n            (n, { scale, speed }, currentIndex) =>\n              n +\n              simplex[currentIndex].noise3D(x / scale, y / scale, z * speed) /\n                layers.length,\n            0\n          );\n          const [r, g, b, a] = noiseToRgba(noise);\n          const index = y * (imageData.width * 4) + x * 4;\n          imageData.data[index + 0] = r;\n          imageData.data[index + 1] = g;\n          imageData.data[index + 2] = b;\n          imageData.data[index + 3] = a;\n        }\n      }\n      return imageData;\n    },\n    [imageData]\n  );\n};\n\nconst Noise: FC<\n  HTMLProps<HTMLCanvasElement> & {\n    width: number;\n    height: number;\n  }\n> = ({ width, height, ...props }) => {\n  const {\n    noise: { layers, resolution },\n  } = useSettings();\n  const computedWidth = Math.round(width * resolution);\n  const computedHeight = Math.round(height * resolution);\n  const computeNoise = useNoise(computedWidth, computedHeight);\n  const handleUpdate = useCallback(\n    (context: CanvasRenderingContext2D) => {\n      const z = Date.now() / 1000;\n      const imageData = computeNoise(layers, z);\n      context.putImageData(imageData, 0, 0);\n    },\n    [computeNoise, layers]\n  );\n\n  return (\n    <Canvas\n      className=\"Noise\"\n      onUpdate={handleUpdate}\n      width={computedWidth}\n      height={computedHeight}\n      style={{ width, height }}\n      {...props}\n    />\n  );\n};\n\nexport default Noise;\n","import React, {\n  ChangeEvent,\n  Dispatch,\n  FC,\n  SetStateAction,\n  useCallback,\n} from \"react\";\nimport {\n  Button,\n  FormGroup,\n  InputGroup,\n  NumericInput,\n  Slider,\n} from \"@blueprintjs/core\";\n\nexport const NoiseForm: FC<{\n  onUpdate: Dispatch<SetStateAction<NoiseSettings>>;\n  settings: NoiseSettings;\n}> = ({ onUpdate, settings: { layers, resolution } }) => {\n  const handleChange = useCallback(\n    (key: string) =>\n      ({ currentTarget: { value } }: ChangeEvent<HTMLInputElement>) => {\n        onUpdate((prevSettings) => ({ ...prevSettings, [key]: value }));\n      },\n    [onUpdate]\n  );\n  const handleValueChange = useCallback(\n    (key: string) => (value: number) => {\n      onUpdate((prevSettings) => ({ ...prevSettings, [key]: value }));\n    },\n    [onUpdate]\n  );\n  const handleLayerValueChange = useCallback(\n    (index: number, key: string) => (value: number) => {\n      onUpdate((prevSettings) => {\n        prevSettings.layers[index] = {\n          ...prevSettings.layers[index],\n          [key]: value,\n        };\n        return { ...prevSettings };\n      });\n    },\n    [onUpdate]\n  );\n  const handleAddLayer = useCallback(() => {\n    onUpdate((prevSettings) => {\n      prevSettings.layers.push({\n        scale: 1,\n        seed: \"\",\n        speed: 0,\n      });\n      return { ...prevSettings };\n    });\n  }, [onUpdate]);\n  const handleRemoveLayer = useCallback(\n    (index) => () => {\n      onUpdate((prevSettings) => {\n        prevSettings.layers.splice(index, 1);\n        return { ...prevSettings, layers: prevSettings.layers };\n      });\n    },\n    [onUpdate]\n  );\n  return (\n    <form className=\"NoiseForm\">\n      <FormGroup className=\"NoiseForm-resolution\" label=\"Resolution\">\n        <NumericInput\n          fill={true}\n          min={0.01}\n          max={1}\n          minorStepSize={null}\n          onValueChange={handleValueChange(\"resolution\")}\n          stepSize={0.01}\n          value={resolution}\n        />\n      </FormGroup>\n      {layers.map(({ scale, seed, speed }, index) => {\n        return (\n          <div className=\"NoiseForm-layer\" key={`${index}-${layers.length}`}>\n            <FormGroup className=\"NoiseForm-layer-seed\" label=\"Seed\">\n              <InputGroup\n                defaultValue={seed}\n                fill={true}\n                onChange={handleChange(\"seed\")}\n              />\n            </FormGroup>\n            <FormGroup className=\"NoiseForm-layer-scale\" label=\"Scale\">\n              <Slider\n                labelStepSize={11}\n                max={100}\n                min={1}\n                onChange={handleLayerValueChange(index, \"scale\")}\n                stepSize={1}\n                value={scale}\n              />\n            </FormGroup>\n            <FormGroup className=\"NoiseForm-layer-speed\" label=\"Speed\">\n              <Slider\n                labelStepSize={0.2}\n                max={1}\n                min={0}\n                onChange={handleLayerValueChange(index, \"speed\")}\n                stepSize={0.01}\n                value={speed}\n              />\n            </FormGroup>\n            <Button onClick={handleRemoveLayer(index)}>Remove Layer</Button>\n          </div>\n        );\n      })}\n      <Button onClick={handleAddLayer}>Add Layer</Button>\n    </form>\n  );\n};\n\nexport default NoiseForm;\n","import React, {\n  Dispatch,\n  FC,\n  SetStateAction,\n  useEffect,\n  useState,\n} from \"react\";\nimport NoiseForm from \"./Form\";\nimport { DEFAULT_SETTINGS, Settings } from \"./index\";\n\nfunction useDebounce<T>(\n  initialValue: T,\n  time: number\n): [T, T, Dispatch<SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(initialValue);\n  const [debouncedValue, setDebouncedValue] = useState<T>(initialValue);\n\n  useEffect(() => {\n    const debounce = setTimeout(() => {\n      setDebouncedValue(value);\n    }, time);\n    return () => {\n      clearTimeout(debounce);\n    };\n  }, [value, time]);\n\n  return [debouncedValue, value, setValue];\n}\n\nexport const SettingsProvider: FC = ({ children, ...props }) => {\n  const [debouncedNoise, noise, setNoise] = useDebounce<NoiseSettings>(\n    DEFAULT_SETTINGS[\"noise\"],\n    200\n  );\n\n  return (\n    <Settings.Provider value={{ noise: debouncedNoise }} {...props}>\n      {children}\n      <div className=\"Settings\">\n        <NoiseForm onUpdate={setNoise} settings={noise} />\n      </div>\n    </Settings.Provider>\n  );\n};\n\nexport default SettingsProvider;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport Noise from \"./Noise\";\nimport SettingsProvider from \"./settings/Provider\";\n\nconst getSize = (): [number, number] => [window.innerWidth, window.innerHeight];\n\nfunction App() {\n  const [[width, height], setSize] = useState(getSize);\n  const handleResize = useCallback(() => setSize(getSize), []);\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [handleResize]);\n\n  return (\n    <div className=\"App\">\n      <SettingsProvider>\n        <Noise width={width} height={height} />\n      </SettingsProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}