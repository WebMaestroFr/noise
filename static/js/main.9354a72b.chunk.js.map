{"version":3,"sources":["Canvas.tsx","settings/index.tsx","Noise.tsx","settings/Form.tsx","settings/Provider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Canvas","onUpdate","props","canvasRef","useRef","getContext","useCallback","canvas","current","useEffect","animationFrameId","context","frameCount","render","window","requestAnimationFrame","cancelAnimationFrame","useCanvas","ref","DEFAULT_SETTINGS","noise","layers","scale","speed","seed","resolution","range","Settings","createContext","useSettings","useContext","noiseToRgba","normalizedNoise","rgb","Math","round","Noise","width","height","computedWidth","computedHeight","computeNoise","imageData","useMemo","ImageData","z","simplex","map","SimplexNoise","getNoiseValue","n","x","y","reduce","currentIndex","noise3D","length","r","g","b","a","index","data","useNoise","handleUpdate","Date","now","putImageData","className","style","validateNumberInput","value","min","max","step","isNaN","NoiseForm","settings","handleValueChange","key","validation","input","prevSettings","handleLayerChange","currentTarget","handleLayerValueChange","handleRangeValueChange","i","handleAddLayer","push","handleRemoveLayer","splice","label","defaultValue","fill","onChange","labelStepSize","stepSize","onClick","minorStepSize","onValueChange","SettingsProvider","children","initialValue","time","useState","setValue","debouncedValue","setDebouncedValue","debounce","setTimeout","clearTimeout","useDebounce","debouncedNoise","setNoise","Provider","getSize","innerWidth","innerHeight","App","setSize","handleResize","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9354a72b.chunk.js","sourcesContent":["import React, { useRef, useEffect, useCallback, FC, HTMLProps } from \"react\";\n\nexport const useCanvas = (\n  onUpdate?: (context: CanvasRenderingContext2D, frameCount: number) => void\n) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const getContext = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      return canvas.getContext(\"2d\");\n    }\n    return null;\n  }, []);\n\n  useEffect(() => {\n    const context = getContext();\n    let frameCount = 0;\n    let animationFrameId: number;\n\n    const render = () => {\n      frameCount++;\n      if (context && onUpdate) {\n        onUpdate(context, frameCount);\n      }\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [getContext, onUpdate]);\n\n  return canvasRef;\n};\n\nconst Canvas: FC<\n  HTMLProps<HTMLCanvasElement> & {\n    onUpdate?: (context: CanvasRenderingContext2D, frameCount: number) => void;\n  }\n> = ({ onUpdate, ...props }) => {\n  const canvasRef = useCanvas(onUpdate);\n  return <canvas ref={canvasRef} {...props} />;\n};\n\nexport default Canvas;\n","import { createContext, useContext } from \"react\";\n\nexport const DEFAULT_SETTINGS: SettingsContext = {\n  noise: {\n    layers: [\n      { scale: 12, speed: 1 / 5, seed: \"1\" },\n      { scale: 24, speed: 1 / 5, seed: \"2\" },\n      { scale: 96, speed: 1 / 5, seed: \"3\" },\n    ],\n    resolution: 1 / 4,\n    range: [-1, 1],\n  },\n};\n\nexport const Settings = createContext<SettingsContext>(DEFAULT_SETTINGS);\n\nconst useSettings = () => useContext(Settings);\nexport default useSettings;\n","import React, { FC, HTMLProps, useCallback, useMemo } from \"react\";\nimport SimplexNoise from \"simplex-noise\";\nimport Canvas from \"./Canvas\";\nimport useSettings from \"./settings\";\n\nfunction noiseToRgba(noise: number) {\n  const normalizedNoise = (noise + 1) / 2;\n  const rgb = Math.round(normalizedNoise * 255);\n  return [rgb, rgb, rgb, 255];\n}\n\nexport const useNoise = (width: number, height: number) => {\n  const imageData = useMemo(\n    () => new ImageData(width, height),\n    [width, height]\n  );\n  return useCallback(\n    (\n      layers: NoiseSettings[\"layers\"],\n      range: [number, number],\n      z: number = 0\n    ) => {\n      const simplex = layers.map(({ seed }) => new SimplexNoise(seed));\n      const getNoiseValue = (n: number) => {\n        if (n <= range[0]) {\n          return -1;\n        }\n        if (n >= range[1]) {\n          return 1;\n        }\n        return ((n - range[0]) / (range[1] - range[0])) * 2 - 1;\n      };\n      for (let x = 0; x < imageData.width; x += 1) {\n        for (let y = 0; y < imageData.height; y += 1) {\n          const noise = layers.reduce(\n            (n, { scale, speed }, currentIndex) =>\n              n +\n              simplex[currentIndex].noise3D(x / scale, y / scale, z * speed) /\n                layers.length,\n            0\n          );\n          const noiseValue = getNoiseValue(noise);\n          const [r, g, b, a] = noiseToRgba(noiseValue);\n          const index = y * (imageData.width * 4) + x * 4;\n          imageData.data[index + 0] = r;\n          imageData.data[index + 1] = g;\n          imageData.data[index + 2] = b;\n          imageData.data[index + 3] = a;\n        }\n      }\n      return imageData;\n    },\n    [imageData]\n  );\n};\n\nconst Noise: FC<\n  HTMLProps<HTMLCanvasElement> & {\n    width: number;\n    height: number;\n  }\n> = ({ width, height, ...props }) => {\n  const {\n    noise: { layers, range, resolution },\n  } = useSettings();\n  const computedWidth = Math.round(width * resolution);\n  const computedHeight = Math.round(height * resolution);\n  const computeNoise = useNoise(computedWidth, computedHeight);\n  const handleUpdate = useCallback(\n    (context: CanvasRenderingContext2D) => {\n      const z = Date.now() / 1000;\n      const imageData = computeNoise(layers, range, z);\n      context.putImageData(imageData, 0, 0);\n    },\n    [computeNoise, layers, range]\n  );\n\n  return (\n    <Canvas\n      className=\"Noise\"\n      onUpdate={handleUpdate}\n      width={computedWidth}\n      height={computedHeight}\n      style={{ width, height }}\n      {...props}\n    />\n  );\n};\n\nexport default Noise;\n","import React, {\n  ChangeEvent,\n  Dispatch,\n  FC,\n  SetStateAction,\n  useCallback,\n} from \"react\";\nimport {\n  Button,\n  FormGroup,\n  InputGroup,\n  NumericInput,\n  RangeSlider,\n  Slider,\n} from \"@blueprintjs/core\";\n\ntype ValidationParams = { min?: number; max?: number; step?: number };\nexport const validateNumberInput = (\n  value: number,\n  { min, max, step }: ValidationParams\n) => {\n  if (min && (value < min || isNaN(value))) {\n    return min;\n  } else if (max && (value > max || isNaN(value))) {\n    return max;\n  } else if (isNaN(value)) {\n    return 0;\n  } else if (step && value % step !== 0) {\n    const factor = Math.round(value / step);\n    return factor * step;\n  }\n  return value;\n};\n\nexport const NoiseForm: FC<{\n  onUpdate: Dispatch<SetStateAction<NoiseSettings>>;\n  settings: NoiseSettings;\n}> = ({ onUpdate, settings: { layers, range, resolution } }) => {\n  const handleValueChange = useCallback(\n    (key: string, validation: ValidationParams) => (input: number) => {\n      const value = validateNumberInput(input, validation);\n      onUpdate((prevSettings) => ({ ...prevSettings, [key]: value }));\n    },\n    [onUpdate]\n  );\n  const handleLayerChange = useCallback(\n    (index: number, key: string) =>\n      ({ currentTarget: { value } }: ChangeEvent<HTMLInputElement>) => {\n        onUpdate((prevSettings) => {\n          prevSettings.layers[index] = {\n            ...prevSettings.layers[index],\n            [key]: value,\n          };\n          return { ...prevSettings };\n        });\n      },\n    [onUpdate]\n  );\n  const handleLayerValueChange = useCallback(\n    (index: number, key: string, validation: ValidationParams) =>\n      (input: number) => {\n        const value = validateNumberInput(input, validation);\n        onUpdate((prevSettings) => {\n          prevSettings.layers[index] = {\n            ...prevSettings.layers[index],\n            [key]: value,\n          };\n          return { ...prevSettings };\n        });\n      },\n    [onUpdate]\n  );\n  const handleRangeValueChange = useCallback(\n    (key: string, validation: ValidationParams) => (input: [number, number]) => {\n      const value = input.map((i) => validateNumberInput(i, validation));\n      onUpdate((prevSettings) => ({ ...prevSettings, [key]: value }));\n    },\n    [onUpdate]\n  );\n  const handleAddLayer = useCallback(() => {\n    onUpdate((prevSettings) => {\n      prevSettings.layers.push({\n        scale: 50,\n        seed: \"\",\n        speed: 0.2,\n      });\n      return { ...prevSettings };\n    });\n  }, [onUpdate]);\n  const handleRemoveLayer = useCallback(\n    (index) => () => {\n      onUpdate((prevSettings) => {\n        prevSettings.layers.splice(index, 1);\n        return { ...prevSettings, layers: prevSettings.layers };\n      });\n    },\n    [onUpdate]\n  );\n  return (\n    <form className=\"NoiseForm\">\n      <h1>Noise</h1>\n      {layers.map(({ scale, seed, speed }, index) => {\n        return (\n          <div className=\"NoiseForm-layer\" key={`${index}-${layers.length}`}>\n            <FormGroup className=\"NoiseForm-layer-seed\" label=\"Seed\">\n              <InputGroup\n                defaultValue={seed}\n                fill={true}\n                onChange={handleLayerChange(index, \"seed\")}\n              />\n            </FormGroup>\n            <FormGroup className=\"NoiseForm-layer-scale\" label=\"Scale\">\n              <Slider\n                labelStepSize={11}\n                max={100}\n                min={1}\n                onChange={handleLayerValueChange(index, \"scale\", {\n                  min: 1,\n                  max: 100,\n                  step: 1,\n                })}\n                stepSize={1}\n                value={scale}\n              />\n            </FormGroup>\n            <FormGroup className=\"NoiseForm-layer-speed\" label=\"Speed\">\n              <Slider\n                labelStepSize={0.2}\n                max={1}\n                min={0}\n                onChange={handleLayerValueChange(index, \"speed\", {\n                  min: 0,\n                  max: 1,\n                  step: 0.01,\n                })}\n                stepSize={0.01}\n                value={speed}\n              />\n            </FormGroup>\n            <Button onClick={handleRemoveLayer(index)}>Remove Layer</Button>\n          </div>\n        );\n      })}\n      <Button onClick={handleAddLayer}>Add Layer</Button>\n      <h2>Settings</h2>\n      <FormGroup className=\"NoiseForm-resolution\" label=\"Resolution\">\n        <NumericInput\n          fill={true}\n          min={0.01}\n          max={1}\n          minorStepSize={null}\n          onValueChange={handleValueChange(\"resolution\", {\n            min: 0.01,\n            max: 1,\n            step: 0.01,\n          })}\n          stepSize={0.01}\n          value={resolution}\n        />\n      </FormGroup>\n      <FormGroup className=\"NoiseForm-range\" label=\"Range\">\n        <RangeSlider\n          min={-1}\n          max={1}\n          stepSize={0.01}\n          labelStepSize={0.4}\n          onChange={handleRangeValueChange(\"range\", {\n            min: -1,\n            max: 1,\n            step: 0.01,\n          })}\n          value={range}\n        />\n      </FormGroup>\n    </form>\n  );\n};\n\nexport default NoiseForm;\n","import React, {\n  Dispatch,\n  FC,\n  SetStateAction,\n  useEffect,\n  useState,\n} from \"react\";\nimport NoiseForm from \"./Form\";\nimport { DEFAULT_SETTINGS, Settings } from \"./index\";\n\nfunction useDebounce<T>(\n  initialValue: T,\n  time: number\n): [T, T, Dispatch<SetStateAction<T>>] {\n  const [value, setValue] = useState<T>(initialValue);\n  const [debouncedValue, setDebouncedValue] = useState<T>(initialValue);\n\n  useEffect(() => {\n    const debounce = setTimeout(() => {\n      setDebouncedValue(value);\n    }, time);\n    return () => {\n      clearTimeout(debounce);\n    };\n  }, [value, time]);\n\n  return [debouncedValue, value, setValue];\n}\n\nexport const SettingsProvider: FC = ({ children, ...props }) => {\n  const [debouncedNoise, noise, setNoise] = useDebounce<NoiseSettings>(\n    DEFAULT_SETTINGS[\"noise\"],\n    200\n  );\n\n  return (\n    <Settings.Provider value={{ noise: debouncedNoise }} {...props}>\n      {children}\n      <div className=\"Settings\">\n        <NoiseForm onUpdate={setNoise} settings={noise} />\n      </div>\n    </Settings.Provider>\n  );\n};\n\nexport default SettingsProvider;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport Noise from \"./Noise\";\nimport SettingsProvider from \"./settings/Provider\";\n\nconst getSize = (): [number, number] => [window.innerWidth, window.innerHeight];\n\nfunction App() {\n  const [[width, height], setSize] = useState(getSize);\n  const handleResize = useCallback(() => setSize(getSize), []);\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [handleResize]);\n\n  return (\n    <div className=\"App\">\n      <SettingsProvider>\n        <Noise width={width} height={height} />\n      </SettingsProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}