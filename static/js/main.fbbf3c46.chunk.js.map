{"version":3,"sources":["Canvas.tsx","Noise.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Canvas","onUpdate","props","canvasRef","useRef","getContext","useCallback","canvas","current","useEffect","animationFrameId","context","frameCount","render","window","requestAnimationFrame","cancelAnimationFrame","useCanvas","ref","noiseToRgba","noise","normalizedNoise","rgb","Math","round","Noise","scale","width","height","computeNoise","simplex","useMemo","SimplexNoise","imageData","ImageData","z","x","y","noise3D","r","g","b","a","index","data","useNoise","handleUpdate","Date","now","putImageData","className","App","useState","innerWidth","innerHeight","setSize","handleResize","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbbf3c46.chunk.js","sourcesContent":["import React, { useRef, useEffect, useCallback, FC, HTMLProps } from \"react\";\n\nexport const useCanvas = (\n  onUpdate?: (context: CanvasRenderingContext2D, frameCount: number) => void\n) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const getContext = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      return canvas.getContext(\"2d\");\n    }\n    return null;\n  }, []);\n\n  useEffect(() => {\n    const context = getContext();\n    let frameCount = 0;\n    let animationFrameId: number;\n\n    const render = () => {\n      frameCount++;\n      if (context && onUpdate) {\n        onUpdate(context, frameCount);\n      }\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [getContext, onUpdate]);\n\n  return canvasRef;\n};\n\nconst Canvas: FC<\n  HTMLProps<HTMLCanvasElement> & {\n    onUpdate?: (context: CanvasRenderingContext2D, frameCount: number) => void;\n  }\n> = ({ onUpdate, ...props }) => {\n  const canvasRef = useCanvas(onUpdate);\n  return <canvas ref={canvasRef} {...props} />;\n};\n\nexport default Canvas;\n","import React, { FC, HTMLProps, useCallback, useMemo } from \"react\";\nimport SimplexNoise from \"simplex-noise\";\nimport Canvas from \"./Canvas\";\n\nfunction noiseToRgba(noise: number) {\n  const normalizedNoise = (noise + 1) / 2;\n  const rgb = Math.round(normalizedNoise * 255);\n  return [rgb, rgb, rgb, 255];\n}\n\nexport const useNoise = (width: number, height: number, scale: number) => {\n  const simplex = useMemo<SimplexNoise>(() => new SimplexNoise(), []);\n  const imageData = useMemo(\n    () => new ImageData(width, height),\n    [width, height]\n  );\n  return useCallback(\n    (z: number = 0) => {\n      for (let x = 0; x < imageData.width; x += 1) {\n        for (let y = 0; y < imageData.height; y += 1) {\n          const noise = simplex.noise3D(x / scale, y / scale, z / scale);\n          const [r, g, b, a] = noiseToRgba(noise);\n          const index = y * (imageData.width * 4) + x * 4;\n          imageData.data[index + 0] = r;\n          imageData.data[index + 1] = g;\n          imageData.data[index + 2] = b;\n          imageData.data[index + 3] = a;\n        }\n      }\n      return imageData;\n    },\n    [imageData, scale, simplex]\n  );\n};\n\nconst Noise: FC<\n  HTMLProps<HTMLCanvasElement> & {\n    scale?: number;\n    width?: number;\n    height: number;\n  }\n> = ({ scale = 128, width = 64, height = 64, ...props }) => {\n  const computeNoise = useNoise(width, height, scale);\n  const handleUpdate = useCallback(\n    (context: CanvasRenderingContext2D) => {\n      const z = Date.now() / 24;\n      const imageData = computeNoise(z);\n      context.putImageData(imageData, 0, 0);\n    },\n    [computeNoise]\n  );\n\n  return (\n    <Canvas\n      className=\"Noise\"\n      onUpdate={handleUpdate}\n      width={width}\n      height={height}\n      {...props}\n    />\n  );\n};\n\nexport default Noise;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Noise from \"./Noise\";\n\nfunction App() {\n  const [[width, height], setSize] = useState([\n    window.innerWidth,\n    window.innerHeight,\n  ]);\n  const handleResize = useCallback(\n    () => setSize([window.innerWidth, window.innerHeight]),\n    []\n  );\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [handleResize]);\n\n  return (\n    <div className=\"App\">\n      <Noise width={width} height={height} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}